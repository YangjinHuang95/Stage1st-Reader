//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 10 files.
  struct file {
    /// Resource file `ColorMap.plist`.
    static let colorMapPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "ColorMap", pathExtension: "plist")
    /// Resource file `DarkPalette.plist`.
    static let darkPalettePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "DarkPalette", pathExtension: "plist")
    /// Resource file `DefaultPalette.plist`.
    static let defaultPalettePlist = Rswift.FileResource(bundle: R.hostingBundle, name: "DefaultPalette", pathExtension: "plist")
    /// Resource file `ForumKeyMap.plist`.
    static let forumKeyMapPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "ForumKeyMap", pathExtension: "plist")
    /// Resource file `InitialOrder.plist`.
    static let initialOrderPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "InitialOrder", pathExtension: "plist")
    /// Resource file `MahjongCategoryOrder.plist`.
    static let mahjongCategoryOrderPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "MahjongCategoryOrder", pathExtension: "plist")
    /// Resource file `MahjongMap.plist`.
    static let mahjongMapPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "MahjongMap", pathExtension: "plist")
    /// Resource file `Mahjong`.
    static let mahjong = Rswift.FileResource(bundle: R.hostingBundle, name: "Mahjong", pathExtension: "")
    /// Resource file `Pods-Stage1st-acknowledgements.plist`.
    static let podsStage1stAcknowledgementsPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "Pods-Stage1st-acknowledgements", pathExtension: "plist")
    /// Resource file `WebTemplate.bundle`.
    static let webTemplateBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "WebTemplate", pathExtension: "bundle")
    
    /// `bundle.url(forResource: "ColorMap", withExtension: "plist")`
    static func colorMapPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.colorMapPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DarkPalette", withExtension: "plist")`
    static func darkPalettePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.darkPalettePlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "DefaultPalette", withExtension: "plist")`
    static func defaultPalettePlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.defaultPalettePlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ForumKeyMap", withExtension: "plist")`
    static func forumKeyMapPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.forumKeyMapPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "InitialOrder", withExtension: "plist")`
    static func initialOrderPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.initialOrderPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Mahjong", withExtension: "")`
    static func mahjong(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mahjong
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MahjongCategoryOrder", withExtension: "plist")`
    static func mahjongCategoryOrderPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mahjongCategoryOrderPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "MahjongMap", withExtension: "plist")`
    static func mahjongMapPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.mahjongMapPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Pods-Stage1st-acknowledgements", withExtension: "plist")`
    static func podsStage1stAcknowledgementsPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.podsStage1stAcknowledgementsPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "WebTemplate", withExtension: "bundle")`
    static func webTemplateBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.webTemplateBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 59 images.
  struct image {
    /// Image `Add`.
    static let add = Rswift.ImageResource(bundle: R.hostingBundle, name: "Add")
    /// Image `Archive-Notify1`.
    static let archiveNotify1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Notify1")
    /// Image `Archive-Syncing 10`.
    static let archiveSyncing10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 10")
    /// Image `Archive-Syncing 11`.
    static let archiveSyncing11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 11")
    /// Image `Archive-Syncing 12`.
    static let archiveSyncing12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 12")
    /// Image `Archive-Syncing 13`.
    static let archiveSyncing13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 13")
    /// Image `Archive-Syncing 14`.
    static let archiveSyncing14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 14")
    /// Image `Archive-Syncing 15`.
    static let archiveSyncing15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 15")
    /// Image `Archive-Syncing 16`.
    static let archiveSyncing16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 16")
    /// Image `Archive-Syncing 17`.
    static let archiveSyncing17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 17")
    /// Image `Archive-Syncing 18`.
    static let archiveSyncing18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 18")
    /// Image `Archive-Syncing 19`.
    static let archiveSyncing19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 19")
    /// Image `Archive-Syncing 1`.
    static let archiveSyncing1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 1")
    /// Image `Archive-Syncing 20`.
    static let archiveSyncing20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 20")
    /// Image `Archive-Syncing 21`.
    static let archiveSyncing21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 21")
    /// Image `Archive-Syncing 22`.
    static let archiveSyncing22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 22")
    /// Image `Archive-Syncing 23`.
    static let archiveSyncing23 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 23")
    /// Image `Archive-Syncing 24`.
    static let archiveSyncing24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 24")
    /// Image `Archive-Syncing 25`.
    static let archiveSyncing25 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 25")
    /// Image `Archive-Syncing 26`.
    static let archiveSyncing26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 26")
    /// Image `Archive-Syncing 27`.
    static let archiveSyncing27 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 27")
    /// Image `Archive-Syncing 28`.
    static let archiveSyncing28 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 28")
    /// Image `Archive-Syncing 29`.
    static let archiveSyncing29 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 29")
    /// Image `Archive-Syncing 2`.
    static let archiveSyncing2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 2")
    /// Image `Archive-Syncing 30`.
    static let archiveSyncing30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 30")
    /// Image `Archive-Syncing 31`.
    static let archiveSyncing31 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 31")
    /// Image `Archive-Syncing 32`.
    static let archiveSyncing32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 32")
    /// Image `Archive-Syncing 33`.
    static let archiveSyncing33 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 33")
    /// Image `Archive-Syncing 34`.
    static let archiveSyncing34 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 34")
    /// Image `Archive-Syncing 35`.
    static let archiveSyncing35 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 35")
    /// Image `Archive-Syncing 36`.
    static let archiveSyncing36 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 36")
    /// Image `Archive-Syncing 3`.
    static let archiveSyncing3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 3")
    /// Image `Archive-Syncing 4`.
    static let archiveSyncing4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 4")
    /// Image `Archive-Syncing 5`.
    static let archiveSyncing5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 5")
    /// Image `Archive-Syncing 6`.
    static let archiveSyncing6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 6")
    /// Image `Archive-Syncing 7`.
    static let archiveSyncing7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 7")
    /// Image `Archive-Syncing 8`.
    static let archiveSyncing8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 8")
    /// Image `Archive-Syncing 9`.
    static let archiveSyncing9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive-Syncing 9")
    /// Image `Archive`.
    static let archive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Archive")
    /// Image `Back-Cached`.
    static let backCached = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back-Cached")
    /// Image `Back`.
    static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back")
    /// Image `Backspace`.
    static let backspace = Rswift.ImageResource(bundle: R.hostingBundle, name: "Backspace")
    /// Image `Close`.
    static let close = Rswift.ImageResource(bundle: R.hostingBundle, name: "Close")
    /// Image `Favorite`.
    static let favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favorite")
    /// Image `Favorited`.
    static let favorited = Rswift.ImageResource(bundle: R.hostingBundle, name: "Favorited")
    /// Image `Forward-Cached`.
    static let forwardCached = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forward-Cached")
    /// Image `Forward`.
    static let forward = Rswift.ImageResource(bundle: R.hostingBundle, name: "Forward")
    /// Image `KeyboardButton`.
    static let keyboardButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "KeyboardButton")
    /// Image `LaunchImage`.
    static let launchImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "LaunchImage")
    /// Image `MahjongFaceButton`.
    static let mahjongFaceButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "MahjongFaceButton")
    /// Image `MahjongFacePlaceholder`.
    static let mahjongFacePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "MahjongFacePlaceholder")
    /// Image `OnePasswordButton`.
    static let onePasswordButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "OnePasswordButton")
    /// Image `Placeholder`.
    static let placeholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholder")
    /// Image `Refresh_black`.
    static let refresh_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "Refresh_black")
    /// Image `Refresh`.
    static let refresh = Rswift.ImageResource(bundle: R.hostingBundle, name: "Refresh")
    /// Image `Safari_s`.
    static let safari_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "Safari_s")
    /// Image `Safari`.
    static let safari = Rswift.ImageResource(bundle: R.hostingBundle, name: "Safari")
    /// Image `Settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings")
    /// Image `Stage1st-Reader-Logo`.
    static let stage1stReaderLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Stage1st-Reader-Logo")
    
    /// `UIImage(named: "Add", bundle: ..., traitCollection: ...)`
    static func add(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.add, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive", bundle: ..., traitCollection: ...)`
    static func archive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archive, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Notify1", bundle: ..., traitCollection: ...)`
    static func archiveNotify1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveNotify1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 1", bundle: ..., traitCollection: ...)`
    static func archiveSyncing1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 10", bundle: ..., traitCollection: ...)`
    static func archiveSyncing10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 11", bundle: ..., traitCollection: ...)`
    static func archiveSyncing11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 12", bundle: ..., traitCollection: ...)`
    static func archiveSyncing12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing12, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 13", bundle: ..., traitCollection: ...)`
    static func archiveSyncing13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing13, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 14", bundle: ..., traitCollection: ...)`
    static func archiveSyncing14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing14, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 15", bundle: ..., traitCollection: ...)`
    static func archiveSyncing15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing15, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 16", bundle: ..., traitCollection: ...)`
    static func archiveSyncing16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 17", bundle: ..., traitCollection: ...)`
    static func archiveSyncing17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing17, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 18", bundle: ..., traitCollection: ...)`
    static func archiveSyncing18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing18, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 19", bundle: ..., traitCollection: ...)`
    static func archiveSyncing19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing19, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 2", bundle: ..., traitCollection: ...)`
    static func archiveSyncing2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 20", bundle: ..., traitCollection: ...)`
    static func archiveSyncing20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 21", bundle: ..., traitCollection: ...)`
    static func archiveSyncing21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing21, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 22", bundle: ..., traitCollection: ...)`
    static func archiveSyncing22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing22, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 23", bundle: ..., traitCollection: ...)`
    static func archiveSyncing23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing23, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 24", bundle: ..., traitCollection: ...)`
    static func archiveSyncing24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing24, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 25", bundle: ..., traitCollection: ...)`
    static func archiveSyncing25(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing25, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 26", bundle: ..., traitCollection: ...)`
    static func archiveSyncing26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing26, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 27", bundle: ..., traitCollection: ...)`
    static func archiveSyncing27(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing27, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 28", bundle: ..., traitCollection: ...)`
    static func archiveSyncing28(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing28, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 29", bundle: ..., traitCollection: ...)`
    static func archiveSyncing29(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing29, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 3", bundle: ..., traitCollection: ...)`
    static func archiveSyncing3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 30", bundle: ..., traitCollection: ...)`
    static func archiveSyncing30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 31", bundle: ..., traitCollection: ...)`
    static func archiveSyncing31(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing31, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 32", bundle: ..., traitCollection: ...)`
    static func archiveSyncing32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing32, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 33", bundle: ..., traitCollection: ...)`
    static func archiveSyncing33(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing33, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 34", bundle: ..., traitCollection: ...)`
    static func archiveSyncing34(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing34, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 35", bundle: ..., traitCollection: ...)`
    static func archiveSyncing35(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing35, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 36", bundle: ..., traitCollection: ...)`
    static func archiveSyncing36(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing36, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 4", bundle: ..., traitCollection: ...)`
    static func archiveSyncing4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 5", bundle: ..., traitCollection: ...)`
    static func archiveSyncing5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 6", bundle: ..., traitCollection: ...)`
    static func archiveSyncing6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 7", bundle: ..., traitCollection: ...)`
    static func archiveSyncing7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 8", bundle: ..., traitCollection: ...)`
    static func archiveSyncing8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Archive-Syncing 9", bundle: ..., traitCollection: ...)`
    static func archiveSyncing9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.archiveSyncing9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Back", bundle: ..., traitCollection: ...)`
    static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Back-Cached", bundle: ..., traitCollection: ...)`
    static func backCached(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backCached, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Backspace", bundle: ..., traitCollection: ...)`
    static func backspace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backspace, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Close", bundle: ..., traitCollection: ...)`
    static func close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.close, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Favorite", bundle: ..., traitCollection: ...)`
    static func favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Favorited", bundle: ..., traitCollection: ...)`
    static func favorited(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorited, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Forward", bundle: ..., traitCollection: ...)`
    static func forward(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forward, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Forward-Cached", bundle: ..., traitCollection: ...)`
    static func forwardCached(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.forwardCached, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "KeyboardButton", bundle: ..., traitCollection: ...)`
    static func keyboardButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.keyboardButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LaunchImage", bundle: ..., traitCollection: ...)`
    static func launchImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.launchImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MahjongFaceButton", bundle: ..., traitCollection: ...)`
    static func mahjongFaceButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mahjongFaceButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MahjongFacePlaceholder", bundle: ..., traitCollection: ...)`
    static func mahjongFacePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mahjongFacePlaceholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "OnePasswordButton", bundle: ..., traitCollection: ...)`
    static func onePasswordButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.onePasswordButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Placeholder", bundle: ..., traitCollection: ...)`
    static func placeholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Refresh", bundle: ..., traitCollection: ...)`
    static func refresh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Refresh_black", bundle: ..., traitCollection: ...)`
    static func refresh_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.refresh_black, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Safari", bundle: ..., traitCollection: ...)`
    static func safari(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.safari, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Safari_s", bundle: ..., traitCollection: ...)`
    static func safari_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.safari_s, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Stage1st-Reader-Logo", bundle: ..., traitCollection: ...)`
    static func stage1stReaderLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.stage1stReaderLogo, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 0 storyboards.
  struct storyboard {
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 84 localization keys.
    struct localizable {
      /// en translation:  (Today)
      /// 
      /// Locales: en, zh-Hans
      static let topicListView_ListHeader_Today = Rswift.StringResource(key: "TopicListView_ListHeader_Today", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 1 month
      /// 
      /// Locales: en, zh-Hans
      static let settingView_HistoryLimit_1month = Rswift.StringResource(key: "SettingView_HistoryLimit_1month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 1 week
      /// 
      /// Locales: en, zh-Hans
      static let settingView_HistoryLimit_1week = Rswift.StringResource(key: "SettingView_HistoryLimit_1week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 1 year
      /// 
      /// Locales: en, zh-Hans
      static let settingView_HistoryLimit_1year = Rswift.StringResource(key: "SettingView_HistoryLimit_1year", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 2 weeks
      /// 
      /// Locales: en, zh-Hans
      static let settingView_HistoryLimit_2weeks = Rswift.StringResource(key: "SettingView_HistoryLimit_2weeks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 3 days
      /// 
      /// Locales: en, zh-Hans
      static let settingView_HistoryLimit_3days = Rswift.StringResource(key: "SettingView_HistoryLimit_3days", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 3 months
      /// 
      /// Locales: en, zh-Hans
      static let settingView_HistoryLimit_3months = Rswift.StringResource(key: "SettingView_HistoryLimit_3months", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: 6 months
      /// 
      /// Locales: en, zh-Hans
      static let settingView_HistoryLimit_6months = Rswift.StringResource(key: "SettingView_HistoryLimit_6months", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Back
      /// 
      /// Locales: en, zh-Hans
      static let settingView_NavigationBar_Back = Rswift.StringResource(key: "SettingView_NavigationBar_Back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let contentViewControllerFloorActionSheetCancel = Rswift.StringResource(key: "ContentViewController.FloorActionSheet.Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let contentView_ActionSheet_Cancel = Rswift.StringResource(key: "ContentView_ActionSheet_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let contentView_WebView_Open_Link_Alert_Cancel = Rswift.StringResource(key: "ContentView_WebView_Open_Link_Alert_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static let rEComposeSheetView_Cancel = Rswift.StringResource(key: "REComposeSheetView_Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Cancel Favorite
      /// 
      /// Locales: en, zh-Hans
      static let contentView_ActionSheet_Cancel_Favorite = Rswift.StringResource(key: "ContentView_ActionSheet_Cancel_Favorite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Click the three dot button to reply the floor. This option will stop you get access to other actions to a floor.
      /// 
      /// Locales: en, zh-Hans
      static let advancedSettingsViewControllerReverseFloorActionRowFooter = Rswift.StringResource(key: "AdvancedSettingsViewController.ReverseFloorActionRow.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy Image URL
      /// 
      /// Locales: en, zh-Hans
      static let imageViewer_ActionSheet_CopyURL = Rswift.StringResource(key: "ImageViewer_ActionSheet_CopyURL", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Copy Link
      /// 
      /// Locales: en, zh-Hans
      static let contentView_ActionSheet_CopyLink = Rswift.StringResource(key: "ContentView_ActionSheet_CopyLink", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Developer
      /// 
      /// Locales: en, zh-Hans
      static let settingView_Developer = Rswift.StringResource(key: "SettingView_Developer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Display Image
      /// 
      /// Locales: en, zh-Hans
      static let settingView_Display_Image = Rswift.StringResource(key: "SettingView_Display_Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: EEEE, MMMM d, yyyy
      /// 
      /// Locales: en, zh-Hans
      static let topicListView_ListHeader_Style = Rswift.StringResource(key: "TopicListView_ListHeader_Style", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: English
      /// 
      /// Locales: en, zh-Hans
      static let systemLanguage = Rswift.StringResource(key: "SystemLanguage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Favorite
      /// 
      /// Locales: en, zh-Hans
      static let contentView_ActionSheet_Favorite = Rswift.StringResource(key: "ContentView_ActionSheet_Favorite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Favorite
      /// 
      /// Locales: en, zh-Hans
      static let topicListView_SegmentControl_Favorite = Rswift.StringResource(key: "TopicListView_SegmentControl_Favorite", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Fetching
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Status_Fetch = Rswift.StringResource(key: "SettingView_CloudKit_Status_Fetch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Floor Action to Reply
      /// 
      /// Locales: en, zh-Hans
      static let advancedSettingsViewControllerReverseFloorActionRowTitle = Rswift.StringResource(key: "AdvancedSettingsViewController.ReverseFloorActionRow.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Font Size
      /// 
      /// Locales: en, zh-Hans
      static let settingView_Font_Size = Rswift.StringResource(key: "SettingView_Font_Size", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Forever
      /// 
      /// Locales: en, zh-Hans
      static let settingView_HistoryLimit_Forever = Rswift.StringResource(key: "SettingView_HistoryLimit_Forever", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Forum Order
      /// 
      /// Locales: en, zh-Hans
      static let settingView_Forum_Order_Custom = Rswift.StringResource(key: "SettingView_Forum_Order_Custom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Get Login Status
      /// 
      /// Locales: en, zh-Hans
      static let loginView_Get_Login_Status = Rswift.StringResource(key: "LoginView_Get_Login_Status", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Getting Login Status Failed
      /// 
      /// Locales: en, zh-Hans
      static let loginView_Get_Login_Status_Failure_Message = Rswift.StringResource(key: "LoginView_Get_Login_Status_Failure_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Getting Login Status Succeed
      /// 
      /// Locales: en, zh-Hans
      static let loginView_Get_Login_Status_Success_Message = Rswift.StringResource(key: "LoginView_Get_Login_Status_Success_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Halt
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Status_Halt = Rswift.StringResource(key: "SettingView_CloudKit_Status_Halt", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Hide Stick Topics
      /// 
      /// Locales: en, zh-Hans
      static let advancedSettingsViewControllerHideStickTopicsRowTitle = Rswift.StringResource(key: "AdvancedSettingsViewController.HideStickTopicsRow.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Hide topics that is pinned to top in forum.
      /// 
      /// Locales: en, zh-Hans
      static let advancedSettingsViewControllerHideStickTopicsRowFooter = Rswift.StringResource(key: "AdvancedSettingsViewController.HideStickTopicsRow.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: History
      /// 
      /// Locales: en, zh-Hans
      static let topicListView_SegmentControl_History = Rswift.StringResource(key: "TopicListView_SegmentControl_History", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Init
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Status_Init = Rswift.StringResource(key: "SettingView_CloudKit_Status_Init", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Keep History
      /// 
      /// Locales: en, zh-Hans
      static let settingView_HistoryLimit = Rswift.StringResource(key: "SettingView_HistoryLimit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Log In
      /// 
      /// Locales: en, zh-Hans
      static let settingView_LogIn = Rswift.StringResource(key: "SettingView_LogIn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Log Out
      /// 
      /// Locales: en, zh-Hans
      static let settingView_LogOut = Rswift.StringResource(key: "SettingView_LogOut", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static let loginView_Title = Rswift.StringResource(key: "LoginView_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Logout Succeed
      /// 
      /// Locales: en, zh-Hans
      static let loginView_Logout_Message = Rswift.StringResource(key: "LoginView_Logout_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: MMMM d
      /// 
      /// Locales: en, zh-Hans
      static let topicListView_ListHeader_Short_Style = Rswift.StringResource(key: "TopicListView_ListHeader_Short_Style", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Need Chinese keyboard to open sina weibo service
      /// 
      /// Locales: en, zh-Hans
      static let contentView_Need_Chinese_Keyboard_To_Open_Weibo_Service_Message = Rswift.StringResource(key: "ContentView_Need_Chinese_Keyboard_To_Open_Weibo_Service_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Not Login
      /// 
      /// Locales: en, zh-Hans
      static let settingView_Not_Login_State_Mark = Rswift.StringResource(key: "SettingView_Not_Login_State_Mark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hans
      static let message_OK = Rswift.StringResource(key: "Message_OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Off
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Status_Off = Rswift.StringResource(key: "SettingView_CloudKit_Status_Off", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Open
      /// 
      /// Locales: en, zh-Hans
      static let contentView_WebView_Open_Link_Alert_Open = Rswift.StringResource(key: "ContentView_WebView_Open_Link_Alert_Open", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Open Link
      /// 
      /// Locales: en, zh-Hans
      static let contentView_WebView_Open_Link_Alert_Title = Rswift.StringResource(key: "ContentView_WebView_Open_Link_Alert_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Original Page
      /// 
      /// Locales: en, zh-Hans
      static let contentView_ActionSheet_OriginPage = Rswift.StringResource(key: "ContentView_ActionSheet_OriginPage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static let loginViewControllerPasswordFieldPlaceholder = Rswift.StringResource(key: "LoginViewController.passwordField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static let loginView_Password = Rswift.StringResource(key: "LoginView_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Please Login in Settings
      /// 
      /// Locales: en, zh-Hans
      static let contentView_Reply_Need_Login_Message = Rswift.StringResource(key: "ContentView_Reply_Need_Login_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Post
      /// 
      /// Locales: en, zh-Hans
      static let rEComposeSheetView_Post = Rswift.StringResource(key: "REComposeSheetView_Post", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Ready
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Status_Ready = Rswift.StringResource(key: "SettingView_CloudKit_Status_Ready", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Recovering
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Status_Recover = Rswift.StringResource(key: "SettingView_CloudKit_Status_Recover", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reply
      /// 
      /// Locales: en, zh-Hans
      static let contentViewControllerFloorActionSheetReply = Rswift.StringResource(key: "ContentViewController.FloorActionSheet.Reply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reply
      /// 
      /// Locales: en, zh-Hans
      static let contentView_ActionSheet_Reply = Rswift.StringResource(key: "ContentView_ActionSheet_Reply", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reply
      /// 
      /// Locales: en, zh-Hans
      static let contentView_Reply_Title = Rswift.StringResource(key: "ContentView_Reply_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reply Suffix
      /// 
      /// Locales: en, zh-Hans
      static let settingView_Append_Suffix = Rswift.StringResource(key: "SettingView_Append_Suffix", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Report
      /// 
      /// Locales: en, zh-Hans
      static let contentViewControllerFloorActionSheetReport = Rswift.StringResource(key: "ContentViewController.FloorActionSheet.Report", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Report
      /// 
      /// Locales: en, zh-Hans
      static let contentView_ActionSheet_Report = Rswift.StringResource(key: "ContentView_ActionSheet_Report", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Report
      /// 
      /// Locales: en, zh-Hans
      static let reportComposeViewControllerTitle = Rswift.StringResource(key: "ReportComposeViewController.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reset
      /// 
      /// Locales: en, zh-Hans
      static let advancedSettingsViewControllerResetSettingsRowHeader = Rswift.StringResource(key: "AdvancedSettingsViewController.ResetSettingsRow.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reset settings in advanced settings to default.
      /// 
      /// Locales: en, zh-Hans
      static let advancedSettingsViewControllerResetSettingsRowFooter = Rswift.StringResource(key: "AdvancedSettingsViewController.ResetSettingsRow.footer", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Reset to Default Settings
      /// 
      /// Locales: en, zh-Hans
      static let advancedSettingsViewControllerResetSettingsRowTitle = Rswift.StringResource(key: "AdvancedSettingsViewController.ResetSettingsRow.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Resumed(%lu-%lu)
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Status_Resumed = Rswift.StringResource(key: "SettingView_CloudKit_Status_Resumed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Save Image
      /// 
      /// Locales: en, zh-Hans
      static let imageViewer_ActionSheet_Save = Rswift.StringResource(key: "ImageViewer_ActionSheet_Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search
      /// 
      /// Locales: en, zh-Hans
      static let topicListView_SearchBar_Hint = Rswift.StringResource(key: "TopicListView_SearchBar_Hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Search %@ Topics
      /// 
      /// Locales: en, zh-Hans
      static let topicListView_SearchBar_Detail_Hint = Rswift.StringResource(key: "TopicListView_SearchBar_Detail_Hint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static let settingView_NavigationBar_Title = Rswift.StringResource(key: "SettingView_NavigationBar_Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static let topicListView_NavigationBar_Settings = Rswift.StringResource(key: "TopicListView_NavigationBar_Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings will take effect on next start
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Enable_Message = Rswift.StringResource(key: "SettingView_CloudKit_Enable_Message", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Setup
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Status_Setup = Rswift.StringResource(key: "SettingView_CloudKit_Status_Setup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Share
      /// 
      /// Locales: en, zh-Hans
      static let contentView_ActionSheet_Share = Rswift.StringResource(key: "ContentView_ActionSheet_Share", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Show Reply Increment
      /// 
      /// Locales: en, zh-Hans
      static let settingView_ReplyIncrement = Rswift.StringResource(key: "SettingView_ReplyIncrement", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Sina Weibo
      /// 
      /// Locales: en, zh-Hans
      static let contentView_ActionSheet_Weibo = Rswift.StringResource(key: "ContentView_ActionSheet_Weibo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Suspended(%lu)(%lu-%lu)
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Status_Suspended = Rswift.StringResource(key: "SettingView_CloudKit_Status_Suspended", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Topic Content
      /// 
      /// Locales: en, zh-Hans
      static let advancedSettingsViewControllerReverseFloorActionRowHeader = Rswift.StringResource(key: "AdvancedSettingsViewController.ReverseFloorActionRow.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Topic List
      /// 
      /// Locales: en, zh-Hans
      static let advancedSettingsViewControllerHideStickTopicsRowHeader = Rswift.StringResource(key: "AdvancedSettingsViewController.HideStickTopicsRow.header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Uploading
      /// 
      /// Locales: en, zh-Hans
      static let settingView_CloudKit_Status_Upload = Rswift.StringResource(key: "SettingView_CloudKit_Status_Upload", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Username
      /// 
      /// Locales: en, zh-Hans
      static let loginViewControllerUsernameFieldPlaceholder = Rswift.StringResource(key: "LoginViewController.usernameField.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Username
      /// 
      /// Locales: en, zh-Hans
      static let loginView_Username = Rswift.StringResource(key: "LoginView_Username", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static let settingView_Version = Rswift.StringResource(key: "SettingView_Version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// zh-Hans translation: 来自:
      /// 
      /// Locales: zh-Hans
      static let from = Rswift.StringResource(key: "From:", tableName: "Localizable", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      
      /// en translation:  (Today)
      /// 
      /// Locales: en, zh-Hans
      static func topicListView_ListHeader_Today(_: Void = ()) -> String {
        return NSLocalizedString("TopicListView_ListHeader_Today", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1 month
      /// 
      /// Locales: en, zh-Hans
      static func settingView_HistoryLimit_1month(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_HistoryLimit_1month", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1 week
      /// 
      /// Locales: en, zh-Hans
      static func settingView_HistoryLimit_1week(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_HistoryLimit_1week", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 1 year
      /// 
      /// Locales: en, zh-Hans
      static func settingView_HistoryLimit_1year(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_HistoryLimit_1year", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 2 weeks
      /// 
      /// Locales: en, zh-Hans
      static func settingView_HistoryLimit_2weeks(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_HistoryLimit_2weeks", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3 days
      /// 
      /// Locales: en, zh-Hans
      static func settingView_HistoryLimit_3days(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_HistoryLimit_3days", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 3 months
      /// 
      /// Locales: en, zh-Hans
      static func settingView_HistoryLimit_3months(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_HistoryLimit_3months", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 6 months
      /// 
      /// Locales: en, zh-Hans
      static func settingView_HistoryLimit_6months(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_HistoryLimit_6months", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back
      /// 
      /// Locales: en, zh-Hans
      static func settingView_NavigationBar_Back(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_NavigationBar_Back", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func contentViewControllerFloorActionSheetCancel(_: Void = ()) -> String {
        return NSLocalizedString("ContentViewController.FloorActionSheet.Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func contentView_ActionSheet_Cancel(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_ActionSheet_Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func contentView_WebView_Open_Link_Alert_Cancel(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_WebView_Open_Link_Alert_Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel
      /// 
      /// Locales: en, zh-Hans
      static func rEComposeSheetView_Cancel(_: Void = ()) -> String {
        return NSLocalizedString("REComposeSheetView_Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Cancel Favorite
      /// 
      /// Locales: en, zh-Hans
      static func contentView_ActionSheet_Cancel_Favorite(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_ActionSheet_Cancel_Favorite", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click the three dot button to reply the floor. This option will stop you get access to other actions to a floor.
      /// 
      /// Locales: en, zh-Hans
      static func advancedSettingsViewControllerReverseFloorActionRowFooter(_: Void = ()) -> String {
        return NSLocalizedString("AdvancedSettingsViewController.ReverseFloorActionRow.footer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy Image URL
      /// 
      /// Locales: en, zh-Hans
      static func imageViewer_ActionSheet_CopyURL(_: Void = ()) -> String {
        return NSLocalizedString("ImageViewer_ActionSheet_CopyURL", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Copy Link
      /// 
      /// Locales: en, zh-Hans
      static func contentView_ActionSheet_CopyLink(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_ActionSheet_CopyLink", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Developer
      /// 
      /// Locales: en, zh-Hans
      static func settingView_Developer(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_Developer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Display Image
      /// 
      /// Locales: en, zh-Hans
      static func settingView_Display_Image(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_Display_Image", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: EEEE, MMMM d, yyyy
      /// 
      /// Locales: en, zh-Hans
      static func topicListView_ListHeader_Style(_: Void = ()) -> String {
        return NSLocalizedString("TopicListView_ListHeader_Style", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: English
      /// 
      /// Locales: en, zh-Hans
      static func systemLanguage(_: Void = ()) -> String {
        return NSLocalizedString("SystemLanguage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Favorite
      /// 
      /// Locales: en, zh-Hans
      static func contentView_ActionSheet_Favorite(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_ActionSheet_Favorite", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Favorite
      /// 
      /// Locales: en, zh-Hans
      static func topicListView_SegmentControl_Favorite(_: Void = ()) -> String {
        return NSLocalizedString("TopicListView_SegmentControl_Favorite", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fetching
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Status_Fetch(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_CloudKit_Status_Fetch", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Floor Action to Reply
      /// 
      /// Locales: en, zh-Hans
      static func advancedSettingsViewControllerReverseFloorActionRowTitle(_: Void = ()) -> String {
        return NSLocalizedString("AdvancedSettingsViewController.ReverseFloorActionRow.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Font Size
      /// 
      /// Locales: en, zh-Hans
      static func settingView_Font_Size(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_Font_Size", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forever
      /// 
      /// Locales: en, zh-Hans
      static func settingView_HistoryLimit_Forever(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_HistoryLimit_Forever", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forum Order
      /// 
      /// Locales: en, zh-Hans
      static func settingView_Forum_Order_Custom(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_Forum_Order_Custom", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Get Login Status
      /// 
      /// Locales: en, zh-Hans
      static func loginView_Get_Login_Status(_: Void = ()) -> String {
        return NSLocalizedString("LoginView_Get_Login_Status", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Getting Login Status Failed
      /// 
      /// Locales: en, zh-Hans
      static func loginView_Get_Login_Status_Failure_Message(_: Void = ()) -> String {
        return NSLocalizedString("LoginView_Get_Login_Status_Failure_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Getting Login Status Succeed
      /// 
      /// Locales: en, zh-Hans
      static func loginView_Get_Login_Status_Success_Message(_: Void = ()) -> String {
        return NSLocalizedString("LoginView_Get_Login_Status_Success_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Halt
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Status_Halt(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_CloudKit_Status_Halt", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hide Stick Topics
      /// 
      /// Locales: en, zh-Hans
      static func advancedSettingsViewControllerHideStickTopicsRowTitle(_: Void = ()) -> String {
        return NSLocalizedString("AdvancedSettingsViewController.HideStickTopicsRow.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Hide topics that is pinned to top in forum.
      /// 
      /// Locales: en, zh-Hans
      static func advancedSettingsViewControllerHideStickTopicsRowFooter(_: Void = ()) -> String {
        return NSLocalizedString("AdvancedSettingsViewController.HideStickTopicsRow.footer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: History
      /// 
      /// Locales: en, zh-Hans
      static func topicListView_SegmentControl_History(_: Void = ()) -> String {
        return NSLocalizedString("TopicListView_SegmentControl_History", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Init
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Status_Init(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_CloudKit_Status_Init", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Keep History
      /// 
      /// Locales: en, zh-Hans
      static func settingView_HistoryLimit(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_HistoryLimit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log In
      /// 
      /// Locales: en, zh-Hans
      static func settingView_LogIn(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_LogIn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log Out
      /// 
      /// Locales: en, zh-Hans
      static func settingView_LogOut(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_LogOut", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static func loginView_Title(_: Void = ()) -> String {
        return NSLocalizedString("LoginView_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Logout Succeed
      /// 
      /// Locales: en, zh-Hans
      static func loginView_Logout_Message(_: Void = ()) -> String {
        return NSLocalizedString("LoginView_Logout_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MMMM d
      /// 
      /// Locales: en, zh-Hans
      static func topicListView_ListHeader_Short_Style(_: Void = ()) -> String {
        return NSLocalizedString("TopicListView_ListHeader_Short_Style", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Need Chinese keyboard to open sina weibo service
      /// 
      /// Locales: en, zh-Hans
      static func contentView_Need_Chinese_Keyboard_To_Open_Weibo_Service_Message(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_Need_Chinese_Keyboard_To_Open_Weibo_Service_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not Login
      /// 
      /// Locales: en, zh-Hans
      static func settingView_Not_Login_State_Mark(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_Not_Login_State_Mark", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, zh-Hans
      static func message_OK(_: Void = ()) -> String {
        return NSLocalizedString("Message_OK", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Off
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Status_Off(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_CloudKit_Status_Off", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open
      /// 
      /// Locales: en, zh-Hans
      static func contentView_WebView_Open_Link_Alert_Open(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_WebView_Open_Link_Alert_Open", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Open Link
      /// 
      /// Locales: en, zh-Hans
      static func contentView_WebView_Open_Link_Alert_Title(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_WebView_Open_Link_Alert_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Original Page
      /// 
      /// Locales: en, zh-Hans
      static func contentView_ActionSheet_OriginPage(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_ActionSheet_OriginPage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static func loginViewControllerPasswordFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("LoginViewController.passwordField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static func loginView_Password(_: Void = ()) -> String {
        return NSLocalizedString("LoginView_Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please Login in Settings
      /// 
      /// Locales: en, zh-Hans
      static func contentView_Reply_Need_Login_Message(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_Reply_Need_Login_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Post
      /// 
      /// Locales: en, zh-Hans
      static func rEComposeSheetView_Post(_: Void = ()) -> String {
        return NSLocalizedString("REComposeSheetView_Post", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ready
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Status_Ready(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_CloudKit_Status_Ready", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Recovering
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Status_Recover(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_CloudKit_Status_Recover", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reply
      /// 
      /// Locales: en, zh-Hans
      static func contentViewControllerFloorActionSheetReply(_: Void = ()) -> String {
        return NSLocalizedString("ContentViewController.FloorActionSheet.Reply", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reply
      /// 
      /// Locales: en, zh-Hans
      static func contentView_ActionSheet_Reply(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_ActionSheet_Reply", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reply
      /// 
      /// Locales: en, zh-Hans
      static func contentView_Reply_Title(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_Reply_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reply Suffix
      /// 
      /// Locales: en, zh-Hans
      static func settingView_Append_Suffix(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_Append_Suffix", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Report
      /// 
      /// Locales: en, zh-Hans
      static func contentViewControllerFloorActionSheetReport(_: Void = ()) -> String {
        return NSLocalizedString("ContentViewController.FloorActionSheet.Report", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Report
      /// 
      /// Locales: en, zh-Hans
      static func contentView_ActionSheet_Report(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_ActionSheet_Report", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Report
      /// 
      /// Locales: en, zh-Hans
      static func reportComposeViewControllerTitle(_: Void = ()) -> String {
        return NSLocalizedString("ReportComposeViewController.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset
      /// 
      /// Locales: en, zh-Hans
      static func advancedSettingsViewControllerResetSettingsRowHeader(_: Void = ()) -> String {
        return NSLocalizedString("AdvancedSettingsViewController.ResetSettingsRow.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset settings in advanced settings to default.
      /// 
      /// Locales: en, zh-Hans
      static func advancedSettingsViewControllerResetSettingsRowFooter(_: Void = ()) -> String {
        return NSLocalizedString("AdvancedSettingsViewController.ResetSettingsRow.footer", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Reset to Default Settings
      /// 
      /// Locales: en, zh-Hans
      static func advancedSettingsViewControllerResetSettingsRowTitle(_: Void = ()) -> String {
        return NSLocalizedString("AdvancedSettingsViewController.ResetSettingsRow.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resumed(%lu-%lu)
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Status_Resumed(_ value1: UInt, _ value2: UInt) -> String {
        return String(format: NSLocalizedString("SettingView_CloudKit_Status_Resumed", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: Save Image
      /// 
      /// Locales: en, zh-Hans
      static func imageViewer_ActionSheet_Save(_: Void = ()) -> String {
        return NSLocalizedString("ImageViewer_ActionSheet_Save", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search
      /// 
      /// Locales: en, zh-Hans
      static func topicListView_SearchBar_Hint(_: Void = ()) -> String {
        return NSLocalizedString("TopicListView_SearchBar_Hint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Search %@ Topics
      /// 
      /// Locales: en, zh-Hans
      static func topicListView_SearchBar_Detail_Hint(_ value1: String) -> String {
        return String(format: NSLocalizedString("TopicListView_SearchBar_Detail_Hint", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static func settingView_NavigationBar_Title(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_NavigationBar_Title", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static func topicListView_NavigationBar_Settings(_: Void = ()) -> String {
        return NSLocalizedString("TopicListView_NavigationBar_Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings will take effect on next start
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Enable_Message(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_CloudKit_Enable_Message", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Setup
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Status_Setup(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_CloudKit_Status_Setup", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share
      /// 
      /// Locales: en, zh-Hans
      static func contentView_ActionSheet_Share(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_ActionSheet_Share", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Show Reply Increment
      /// 
      /// Locales: en, zh-Hans
      static func settingView_ReplyIncrement(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_ReplyIncrement", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sina Weibo
      /// 
      /// Locales: en, zh-Hans
      static func contentView_ActionSheet_Weibo(_: Void = ()) -> String {
        return NSLocalizedString("ContentView_ActionSheet_Weibo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Suspended(%lu)(%lu-%lu)
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Status_Suspended(_ value1: UInt, _ value2: UInt, _ value3: UInt) -> String {
        return String(format: NSLocalizedString("SettingView_CloudKit_Status_Suspended", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2, value3)
      }
      
      /// en translation: Topic Content
      /// 
      /// Locales: en, zh-Hans
      static func advancedSettingsViewControllerReverseFloorActionRowHeader(_: Void = ()) -> String {
        return NSLocalizedString("AdvancedSettingsViewController.ReverseFloorActionRow.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Topic List
      /// 
      /// Locales: en, zh-Hans
      static func advancedSettingsViewControllerHideStickTopicsRowHeader(_: Void = ()) -> String {
        return NSLocalizedString("AdvancedSettingsViewController.HideStickTopicsRow.header", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Uploading
      /// 
      /// Locales: en, zh-Hans
      static func settingView_CloudKit_Status_Upload(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_CloudKit_Status_Upload", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username
      /// 
      /// Locales: en, zh-Hans
      static func loginViewControllerUsernameFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("LoginViewController.usernameField.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username
      /// 
      /// Locales: en, zh-Hans
      static func loginView_Username(_: Void = ()) -> String {
        return NSLocalizedString("LoginView_Username", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static func settingView_Version(_: Void = ()) -> String {
        return NSLocalizedString("SettingView_Version", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 来自:
      /// 
      /// Locales: zh-Hans
      static func from(_: Void = ()) -> String {
        return NSLocalizedString("From:", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.settings` struct is generated, and contains static references to 43 localization keys.
    struct settings {
      /// en translation: About
      /// 
      /// Locales: en, zh-Hans
      static let e4ME1PBDHeaderTitle = Rswift.StringResource(key: "e4M-E1-pBD.headerTitle", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Acknowledgements
      /// 
      /// Locales: en, zh-Hans
      static let hjeFjJECText = Rswift.StringResource(key: "Hje-fj-JEC.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Advanced Settings
      /// 
      /// Locales: en, zh-Hans
      static let nMtWjMxrText = Rswift.StringResource(key: "NMt-Wj-mxr.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Back
      /// 
      /// Locales: en, zh-Hans
      static let cV4G8ASXTitle = Rswift.StringResource(key: "CV4-G8-ASX.title", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Clear CloudKit Data
      /// 
      /// Locales: en, zh-Hans
      static let e5PTUGZIText = Rswift.StringResource(key: "e5P-TU-gZI.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: CloudKit Status
      /// 
      /// Locales: en, zh-Hans
      static let i7yYoKbqHeaderTitle = Rswift.StringResource(key: "I7y-yo-kbq.headerTitle", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Current Sync State
      /// 
      /// Locales: en, zh-Hans
      static let kiY8qMSHText = Rswift.StringResource(key: "KiY-8q-MSH.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static let dVMnMyvText = Rswift.StringResource(key: "8dV-mn-myv.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static let e8bPXRjKText = Rswift.StringResource(key: "E8b-PX-rjK.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static let gBNO4LQ9Text = Rswift.StringResource(key: "gBN-o4-LQ9.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static let kc8Ab2ZDText = Rswift.StringResource(key: "kc8-ab-2ZD.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static let mDi8t5qrText = Rswift.StringResource(key: "MDi-8t-5qr.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static let mV73qFFBText = Rswift.StringResource(key: "mV7-3q-fFB.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Developers
      /// 
      /// Locales: en, zh-Hans
      static let yBwQfDtHText = Rswift.StringResource(key: "yBw-Qf-dtH.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Display Image (Mobile Data)
      /// 
      /// Locales: en, zh-Hans
      static let y50DImPText = Rswift.StringResource(key: "4y5-0D-ImP.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enable iCloud Sync
      /// 
      /// Locales: en, zh-Hans
      static let zEtR3VHzText = Rswift.StringResource(key: "ZEt-r3-VHz.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Enable iCloud Sync means your topic history and favorite data will sync with your current iCloud account.
      /// 
      /// Locales: en, zh-Hans
      static let apkScQdJFooterTitle = Rswift.StringResource(key: "Apk-Sc-qdJ.footerTitle", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Font Size
      /// 
      /// Locales: en, zh-Hans
      static let vSVtAirText = Rswift.StringResource(key: "8vS-vt-Air.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Force Portrait
      /// 
      /// Locales: en, zh-Hans
      static let dBMIT6OEText = Rswift.StringResource(key: "DBM-iT-6OE.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Forum Order
      /// 
      /// Locales: en, zh-Hans
      static let r3P1NMfTitle = Rswift.StringResource(key: "6R3-p1-NMf.title", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Forum Order
      /// 
      /// Locales: en, zh-Hans
      static let zB571YajText = Rswift.StringResource(key: "ZB5-71-yaj.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Gabriel & ainopara
      /// 
      /// Locales: en, zh-Hans
      static let sWlNGF4SText = Rswift.StringResource(key: "SWl-nG-F4S.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Keep History
      /// 
      /// Locales: en, zh-Hans
      static let dX91QYuaText = Rswift.StringResource(key: "DX9-1Q-Yua.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Last Error Code
      /// 
      /// Locales: en, zh-Hans
      static let lhC0GNoText = Rswift.StringResource(key: "0Lh-c0-gNo.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static let ng5KUSG1Text = Rswift.StringResource(key: "ng5-KU-SG1.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static let rgaRa1eATitle = Rswift.StringResource(key: "Rga-Ra-1eA.title", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static let swqPAVhcNormalTitle = Rswift.StringResource(key: "swq-PA-Vhc.normalTitle", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Night Mode
      /// 
      /// Locales: en, zh-Hans
      static let iaqFtRzyText = Rswift.StringResource(key: "Iaq-ft-rzy.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Not Login
      /// 
      /// Locales: en, zh-Hans
      static let nZsMVDJoText = Rswift.StringResource(key: "nZs-MV-DJo.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Off
      /// 
      /// Locales: en, zh-Hans
      static let eaQdTText = Rswift.StringResource(key: "174-Ea-QdT.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static let a7EZ0WQqPlaceholder = Rswift.StringResource(key: "a7E-Z0-WQq.placeholder", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Precache Next Page
      /// 
      /// Locales: en, zh-Hans
      static let zBD2E6nEText = Rswift.StringResource(key: "zBD-2E-6nE.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Remove Tails
      /// 
      /// Locales: en, zh-Hans
      static let afJHF0oGText = Rswift.StringResource(key: "afJ-hF-0oG.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static let u6ZFPJaYTitle = Rswift.StringResource(key: "u6Z-FP-JaY.title", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static let z9IYZQ2kTitle = Rswift.StringResource(key: "Z9I-YZ-q2k.title", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Syncing
      /// 
      /// Locales: en, zh-Hans
      static let q9gTA73JHeaderTitle = Rswift.StringResource(key: "q9g-tA-73J.headerTitle", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Title
      /// 
      /// Locales: en, zh-Hans
      static let conMD8cXText = Rswift.StringResource(key: "con-mD-8cX.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Upload Queue
      /// 
      /// Locales: en, zh-Hans
      static let uXWgP1UText = Rswift.StringResource(key: "2UX-Wg-p1U.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Use API
      /// 
      /// Locales: en, zh-Hans
      static let aMTBbS6DText = Rswift.StringResource(key: "AMT-Bb-S6D.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Username
      /// 
      /// Locales: en, zh-Hans
      static let hFSF9frPlaceholder = Rswift.StringResource(key: "8hF-SF-9fr.placeholder", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static let peaApWK5Text = Rswift.StringResource(key: "pea-Ap-wK5.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: iCloud Sync
      /// 
      /// Locales: en, zh-Hans
      static let apkScQdJHeaderTitle = Rswift.StringResource(key: "Apk-Sc-qdJ.headerTitle", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      /// en translation: iCloud Sync
      /// 
      /// Locales: en, zh-Hans
      static let dfZpQy9Text = Rswift.StringResource(key: "2Df-Zp-Qy9.text", tableName: "Settings", bundle: R.hostingBundle, locales: ["en", "zh-Hans"], comment: nil)
      
      /// en translation: About
      /// 
      /// Locales: en, zh-Hans
      static func e4ME1PBDHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("e4M-E1-pBD.headerTitle", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Acknowledgements
      /// 
      /// Locales: en, zh-Hans
      static func hjeFjJECText(_: Void = ()) -> String {
        return NSLocalizedString("Hje-fj-JEC.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Advanced Settings
      /// 
      /// Locales: en, zh-Hans
      static func nMtWjMxrText(_: Void = ()) -> String {
        return NSLocalizedString("NMt-Wj-mxr.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Back
      /// 
      /// Locales: en, zh-Hans
      static func cV4G8ASXTitle(_: Void = ()) -> String {
        return NSLocalizedString("CV4-G8-ASX.title", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Clear CloudKit Data
      /// 
      /// Locales: en, zh-Hans
      static func e5PTUGZIText(_: Void = ()) -> String {
        return NSLocalizedString("e5P-TU-gZI.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: CloudKit Status
      /// 
      /// Locales: en, zh-Hans
      static func i7yYoKbqHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("I7y-yo-kbq.headerTitle", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Current Sync State
      /// 
      /// Locales: en, zh-Hans
      static func kiY8qMSHText(_: Void = ()) -> String {
        return NSLocalizedString("KiY-8q-MSH.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static func dVMnMyvText(_: Void = ()) -> String {
        return NSLocalizedString("8dV-mn-myv.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static func e8bPXRjKText(_: Void = ()) -> String {
        return NSLocalizedString("E8b-PX-rjK.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static func gBNO4LQ9Text(_: Void = ()) -> String {
        return NSLocalizedString("gBN-o4-LQ9.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static func kc8Ab2ZDText(_: Void = ()) -> String {
        return NSLocalizedString("kc8-ab-2ZD.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static func mDi8t5qrText(_: Void = ()) -> String {
        return NSLocalizedString("MDi-8t-5qr.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Detail
      /// 
      /// Locales: en, zh-Hans
      static func mV73qFFBText(_: Void = ()) -> String {
        return NSLocalizedString("mV7-3q-fFB.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Developers
      /// 
      /// Locales: en, zh-Hans
      static func yBwQfDtHText(_: Void = ()) -> String {
        return NSLocalizedString("yBw-Qf-dtH.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Display Image (Mobile Data)
      /// 
      /// Locales: en, zh-Hans
      static func y50DImPText(_: Void = ()) -> String {
        return NSLocalizedString("4y5-0D-ImP.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enable iCloud Sync
      /// 
      /// Locales: en, zh-Hans
      static func zEtR3VHzText(_: Void = ()) -> String {
        return NSLocalizedString("ZEt-r3-VHz.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enable iCloud Sync means your topic history and favorite data will sync with your current iCloud account.
      /// 
      /// Locales: en, zh-Hans
      static func apkScQdJFooterTitle(_: Void = ()) -> String {
        return NSLocalizedString("Apk-Sc-qdJ.footerTitle", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Font Size
      /// 
      /// Locales: en, zh-Hans
      static func vSVtAirText(_: Void = ()) -> String {
        return NSLocalizedString("8vS-vt-Air.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Force Portrait
      /// 
      /// Locales: en, zh-Hans
      static func dBMIT6OEText(_: Void = ()) -> String {
        return NSLocalizedString("DBM-iT-6OE.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forum Order
      /// 
      /// Locales: en, zh-Hans
      static func r3P1NMfTitle(_: Void = ()) -> String {
        return NSLocalizedString("6R3-p1-NMf.title", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Forum Order
      /// 
      /// Locales: en, zh-Hans
      static func zB571YajText(_: Void = ()) -> String {
        return NSLocalizedString("ZB5-71-yaj.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Gabriel & ainopara
      /// 
      /// Locales: en, zh-Hans
      static func sWlNGF4SText(_: Void = ()) -> String {
        return NSLocalizedString("SWl-nG-F4S.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Keep History
      /// 
      /// Locales: en, zh-Hans
      static func dX91QYuaText(_: Void = ()) -> String {
        return NSLocalizedString("DX9-1Q-Yua.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Last Error Code
      /// 
      /// Locales: en, zh-Hans
      static func lhC0GNoText(_: Void = ()) -> String {
        return NSLocalizedString("0Lh-c0-gNo.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static func ng5KUSG1Text(_: Void = ()) -> String {
        return NSLocalizedString("ng5-KU-SG1.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static func rgaRa1eATitle(_: Void = ()) -> String {
        return NSLocalizedString("Rga-Ra-1eA.title", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Login
      /// 
      /// Locales: en, zh-Hans
      static func swqPAVhcNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("swq-PA-Vhc.normalTitle", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Night Mode
      /// 
      /// Locales: en, zh-Hans
      static func iaqFtRzyText(_: Void = ()) -> String {
        return NSLocalizedString("Iaq-ft-rzy.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Not Login
      /// 
      /// Locales: en, zh-Hans
      static func nZsMVDJoText(_: Void = ()) -> String {
        return NSLocalizedString("nZs-MV-DJo.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Off
      /// 
      /// Locales: en, zh-Hans
      static func eaQdTText(_: Void = ()) -> String {
        return NSLocalizedString("174-Ea-QdT.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password
      /// 
      /// Locales: en, zh-Hans
      static func a7EZ0WQqPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("a7E-Z0-WQq.placeholder", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Precache Next Page
      /// 
      /// Locales: en, zh-Hans
      static func zBD2E6nEText(_: Void = ()) -> String {
        return NSLocalizedString("zBD-2E-6nE.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Remove Tails
      /// 
      /// Locales: en, zh-Hans
      static func afJHF0oGText(_: Void = ()) -> String {
        return NSLocalizedString("afJ-hF-0oG.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static func u6ZFPJaYTitle(_: Void = ()) -> String {
        return NSLocalizedString("u6Z-FP-JaY.title", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Settings
      /// 
      /// Locales: en, zh-Hans
      static func z9IYZQ2kTitle(_: Void = ()) -> String {
        return NSLocalizedString("Z9I-YZ-q2k.title", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Syncing
      /// 
      /// Locales: en, zh-Hans
      static func q9gTA73JHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("q9g-tA-73J.headerTitle", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Title
      /// 
      /// Locales: en, zh-Hans
      static func conMD8cXText(_: Void = ()) -> String {
        return NSLocalizedString("con-mD-8cX.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Upload Queue
      /// 
      /// Locales: en, zh-Hans
      static func uXWgP1UText(_: Void = ()) -> String {
        return NSLocalizedString("2UX-Wg-p1U.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Use API
      /// 
      /// Locales: en, zh-Hans
      static func aMTBbS6DText(_: Void = ()) -> String {
        return NSLocalizedString("AMT-Bb-S6D.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username
      /// 
      /// Locales: en, zh-Hans
      static func hFSF9frPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("8hF-SF-9fr.placeholder", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Version
      /// 
      /// Locales: en, zh-Hans
      static func peaApWK5Text(_: Void = ()) -> String {
        return NSLocalizedString("pea-Ap-wK5.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: iCloud Sync
      /// 
      /// Locales: en, zh-Hans
      static func apkScQdJHeaderTitle(_: Void = ()) -> String {
        return NSLocalizedString("Apk-Sc-qdJ.headerTitle", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: iCloud Sync
      /// 
      /// Locales: en, zh-Hans
      static func dfZpQy9Text(_: Void = ()) -> String {
        return NSLocalizedString("2Df-Zp-Qy9.text", tableName: "Settings", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R {
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard {
    fileprivate init() {}
  }
  
  fileprivate init() {}
}